'use strict';

const path = require('path');
const fs = require('fs');
const sinon = require('sinon');
const Emulator = require('../../lib/emulator');
const disasm = require('./disasm');
const dasmSym = require('./dasmSym');

// NBAF
// const romU06Path = process.env.ROMFILE || path.join(__dirname, '/../../rom/fb_g11.ROM');
// const dasmEntryList = require('../../lib/db/nba-dasm-entries');
// NBAF

// GW proto
const romU06Path = process.env.ROMFILE || path.join(__dirname, '/../../rom/u6-p-c.rom');
const dasmEntryList = require('../../lib/db/gw-proto-dasm-entries');
// GW-proto

const HAS_SECURITY_FEATURE = process.env.HAS_SECURITY_FEATURE === 'true' ? ['securityPic', 'wpcSecure'] : [];
const HAS_DCS_BOARD = process.env.HAS_DCS_BOARD === 'true' ? ['wpcDcs'] : [];
const HAS_DMD_BOARD = process.env.HAS_DMD_BOARD === 'true' ? ['wpcDmd'] : [];
const HAS_FLIPTRONICS_BOARD = process.env.HAS_FLIPTRONICS_BOARD === 'true' ? ['wpcFliptronics'] : [];

const FEATURES = HAS_DCS_BOARD.concat(HAS_SECURITY_FEATURE).concat(HAS_DMD_BOARD).concat(HAS_FLIPTRONICS_BOARD);

const MAXSTEPS = process.env.STEPS || 0xFF000;

console.log('WPC-EMU Disassembly Testing', { FEATURES, MAXSTEPS, ROMFILE: romU06Path });

const MAX_LOOPS = 20000;
// const MAX_LOOPS = 16384;
// const MAX_LOOPS = 2048;
// const MAX_LOOPS = 1024;
// const MAX_LOOPS = 64;
const lastPC = [MAX_LOOPS].fill(0xFF);
let outputSlice = [];
let traceLoops = 0;

// TESTING
let dasmDefinitions = [];
let dasmOutput = [];
// TESTING

function initDasmEntries() {
    dasmDefinitions = dasmEntryList.getDasmEntries();
}

function initTraceLoops() {
  outputSlice = [];
}

function startTrace() {
  const loadRomFilesPromise = Promise.all([
    loadFile(romU06Path),
  ]);

  initDasmEntries();
  initTraceLoops();
  return loadRomFilesPromise
    .then((romFiles) => {
      const romData = {
        u06: romFiles[0],
      };
      return Emulator.initVMwithRom(romData, {
        fileName: 'gw_pc',
        features: FEATURES,
        skipWpcRomCheck: true,
      });
    })
    .then((wpcSystem) => {

      wpcSystem.reset();
      wpcSystem.start();

      console.error( "------------------------------------------------------------------");

      let bankId = 0x20;
      // let bankId = 0x30;
      // let bankId = 0x38;
      // let bankId = 0x39;

      wpcSystem.cpuBoard.cpu.memoryWriteFunction( 0x3ffc, bankId );
      wpcSystem.cpuBoard.cpu.regPC = 0x422c;
      // wpcSystem.cpuBoard.cpu.regPC = 0x4185;
      // wpcSystem.cpuBoard.cpu.regPC = 0x4178;

      // wpcSystem.cpuBoard.cpu.regPC = 0x8e31;
      // wpcSystem.cpuBoard.cpu.regPC = 0x8eb8;
      // wpcSystem.cpuBoard.cpu.regPC = 0xd94d;
      // wpcSystem.cpuBoard.cpu.regPC = 0x9b00;
      let endAddress = 0xFFFF;

      let steps = 0;

      while (steps++ < MAX_LOOPS) {

        const cpu = wpcSystem.cpuBoard.cpu;
        const pc = cpu.regPC;

        // even though most instructions will use far fewer bytes than 8,
        // we don't yet know how many bytes we will need for the current instruction
        // ...so, grab next 8 bytes
        const line = memoryReadRange( pc, 8, cpu );

        let result = dasmSym.dasmSym( pc, line, cpu, bankId );
        console.log( result.getOutput() );

        let newPC = pc + result.getLength();
        wpcSystem.cpuBoard.cpu.regPC = newPC;

        if (newPC > 0xFFFF) { steps = MAX_LOOPS; }
        if (newPC >= endAddress) { steps = MAX_LOOPS; }

      }
    })
    .catch((error) => {
      console.log('ERROR', error.message, error.stack);
    });
}

setupFakeSystemTime();
startTrace();

// HERE
function memoryReadRange( start, length, cpu ) {

  let range = [];
  let end = start + length;

  for ( let currentMemoryLocation = start; currentMemoryLocation <= end; currentMemoryLocation++ ){
    range.push(  cpu.memoryReadFunction(currentMemoryLocation) );
  }
  return range;
}
// HERE

function formatRegister(value, padLength) {
  return value.toString(16).padStart(padLength, '0').toUpperCase() + ' ';
}

function addDasmLine( sourceCodeToAdd ) {
  dasmOutput.push( sourceCodeToAdd );
}

function addDasmDividerComment( ) {
  addDasmLine( ";---------------------------------------------------------"  );
}

function loadFile(fileName) {
  return new Promise((resolve, reject) => {
    fs.readFile(fileName, (error, data) => {
      if (error) {
        return reject(error);
      }
      resolve(new Uint8Array(data));
    });
  });
}

function setupFakeSystemTime() {
  // to reduce diff generated by the roms, we set the system clock to January 1st 2017
  sinon.useFakeTimers({
    now: 1483228800000,
  });
  console.log('Fake system clock initialized:', new Date());
}